
查询登录名：git config --global user.naem  
 没有的话可以设置  git config --global user.naem "登录名"


查询邮箱号：git config --global user.email 
 没有的话可以设置  git config --global user.email "邮箱号"


ssh-keygen -t rsa -C "邮箱号"  注册生成秘钥key
ssh-keygen -t rsa -C "<user-emailaddress>"

ssh-T git@github.com 查询下生成秘钥是否成功


git init 初始化
git add .
git commit -m "描述"
git remote add origin git@github.com:<user-name>/<project-name>.git 关联自己GitHub上的origin远程库的仓库


git diff (本地添加)
git add.
git commit -m "描述"
git log 展示提交次数 详细情况
git push


发生冲突后
git pull  远程仓库和本地合并
git add.
git commit -m ""
git log 展示提交次数 详细情况
git push


git branch  查看分支
git branch  <分支名> 创建

git checkout  切换分支
git checkout  -b <分支名> 创建并切换

git merge <分支名>
git branch -d 分支名 删除


.gitignore 文件
/node-modules/ 忽略文件


删除本地仓库
git checkout master # 切换到master分支
git branch -d dev # 删除本地dev分

删除远程仓库  勿操作 危险命令
git push origin :分支名
（git push origin :dev）     


在本地
git checkout -b dev 新建并切换到本地dev分支

git pull origin dev 本地分支与远程分支相关联

在本地新建分支并推送到远程
git checkout -b test

git push origin test 这样远程仓库中也就创建了一个test分支


开发代码之后，我们有两个选择
第一个：如果功能开发完成了，可以合并主分支
git checkout master # 切换到主分支
git merge dev # 把dev分支的更改和master合并
git push # 提交主分支代码远程
git checkout dev # 切换到dev远程分支
git push # 提交dev分支到远程

第二个：如果功能没有完成，可以直接推送
git push # 提交到dev远程分支
